-- =====================
-- Auto Summit SansMoba (Per-Map + Export/Import + AutoSave + Toggle Farm Button)
-- by Zir ‚Äî 2025-08-15
-- =====================

-- Services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local HttpService = game:GetService("HttpService")
local StarterGui = game:GetService("StarterGui")

-- ====== UTIL ======
local function sendNotif(title, text, duration)
    pcall(function()
        StarterGui:SetCore("SendNotification", {
            Title = title,
            Text = text,
            Duration = duration or 3
        })
    end)
end

local function toClipboard(str)
    if setclipboard then
        setclipboard(str)
        return true
    elseif toclipboard then
        toclipboard(str)
        return true
    else
        return false
    end
end

-- File helpers
local CAN_FILE = (typeof(isfile) == "function" and typeof(writefile) == "function" and typeof(readfile) == "function")
local SAVE_PATH = "AutoSummit_checkpoints.json"

local function fileExists(path)
    if not CAN_FILE then return false end
    local ok = pcall(function() return isfile(path) end)
    return ok and isfile(path)
end

local function safeWrite(path, data)
    if not CAN_FILE then return false end
    local ok = pcall(function() writefile(path, data) end)
    return ok
end

local function safeRead(path)
    if not CAN_FILE or not fileExists(path) then return nil end
    local ok, content = pcall(function() return readfile(path) end)
    if ok then return content end
    return nil
end

-- ====== DATA ======
local currentMap = game.PlaceId
local mapCheckpoints = {}
local checkpoints = {}
local farming = false
local loopMode = true

local function vecToTbl(v) return { x = v.X, y = v.Y, z = v.Z } end
local function tblToVec(t) return Vector3.new(t.x, t.y, t.z) end

local function encodeAll()
    local payload = {}
    for k, list in pairs(mapCheckpoints) do
        payload[k] = {}
        for i, t in ipairs(list) do
            payload[k][i] = t
        end
    end
    return HttpService:JSONEncode(payload)
end

local function decodeAll(json)
    local ok, data = pcall(function() return HttpService:JSONDecode(json) end)
    if not ok or type(data) ~= "table" then return {} end
    return data
end

local function saveToFile()
    if not CAN_FILE then return end
    safeWrite(SAVE_PATH, encodeAll())
end

local function loadFromFile()
    if not CAN_FILE or not fileExists(SAVE_PATH) then return end
    local content = safeRead(SAVE_PATH)
    if not content then return end
    mapCheckpoints = decodeAll(content)
end

-- Current map helpers
local mapKey = tostring(currentMap)
local function ensureMapBucket()
    mapCheckpoints[mapKey] = mapCheckpoints[mapKey] or {}
end

local function refreshRuntimeFromStore()
    ensureMapBucket()
    checkpoints = {}
    for _, t in ipairs(mapCheckpoints[mapKey]) do
        table.insert(checkpoints, tblToVec(t))
    end
end

local function pushRuntimeToStore()
    ensureMapBucket()
    mapCheckpoints[mapKey] = {}
    for _, v in ipairs(checkpoints) do
        table.insert(mapCheckpoints[mapKey], vecToTbl(v))
    end
end

-- ====== CORE FUNCS ======
local tpDelay = 10 -- default 10 detik
local function tpTo(pos)
    if LocalPlayer.Character then
        LocalPlayer.Character:MoveTo(pos)
        task.wait(tpDelay)
    end
end

local function respawn()
    if LocalPlayer.Character then
        LocalPlayer.Character:BreakJoints()
    end
end

local function saveCheckpoint()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local pos = LocalPlayer.Character.HumanoidRootPart.Position
        table.insert(checkpoints, pos)
        pushRuntimeToStore()
        saveToFile()
        sendNotif("Checkpoint", "Tersimpan untuk map "..mapKey.." ("..#checkpoints.." total).", 2)
    end
end

local function clearCheckpoints()
    checkpoints = {}
    pushRuntimeToStore()
    saveToFile()
    sendNotif("Checkpoint", "Semua checkpoint map ini dihapus.", 2)
end

-- ====== IMPORT / EXPORT ======
local function exportCurrentMap()
    local list = {}
    for _, v in ipairs(checkpoints) do
        table.insert(list, vecToTbl(v))
    end
    local str = HttpService:JSONEncode(list)
    local ok = toClipboard(str)
    if ok then
        sendNotif("Export", "Data disalin ke clipboard!", 3)
    else
        sendNotif("Export", "Clipboard tidak didukung, tampilkan di UI.", 3)
    end
    return str
end

local function importCurrentMapFromString(str)
    local ok, data = pcall(function() return HttpService:JSONDecode(str) end)
    if not ok or type(data) ~= "table" then
        sendNotif("Import", "Gagal decode data. Pastikan format JSON benar.", 3)
        return false
    end
    checkpoints = {}
    for _, t in ipairs(data) do
        if t and t.x and t.y and t.z then
            table.insert(checkpoints, tblToVec(t))
        end
    end
    pushRuntimeToStore()
    saveToFile()
    sendNotif("Import", ("Berhasil import %d checkpoint."):format(#checkpoints), 3)
    return true
end

-- ====== BOOT ======
loadFromFile()
refreshRuntimeFromStore()

-- ====== UI ======
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = game.CoreGui

local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0, 260, 0, 360)
MainFrame.Position = UDim2.new(0, 50, 0, 50)
MainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
MainFrame.Active = true
MainFrame.Draggable = true
MainFrame.Parent = ScreenGui

-- Header
local Header = Instance.new("Frame")
Header.Size = UDim2.new(1, 0, 0, 40)
Header.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
Header.Parent = MainFrame

local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, -90, 1, 0)
Title.Position = UDim2.new(0, 10, 0, 0)
Title.BackgroundTransparency = 1
Title.Text = "‚ö°SansMobaHub | Auto Summit"
Title.Font = Enum.Font.GothamBold
Title.TextSize = 13
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.Parent = Header

local function makeHeaderBtn(text, color, posX)
    local Btn = Instance.new("TextButton")
    Btn.Size = UDim2.new(0, 25, 1, 0)
    Btn.Position = UDim2.new(1, posX, 0, 0)
    Btn.Text = text
    Btn.Font = Enum.Font.GothamBold
    Btn.TextSize = 16
    Btn.BackgroundColor3 = color
    Btn.TextColor3 = Color3.fromRGB(255, 255, 255)
    Btn.Parent = Header
    Instance.new("UICorner", Btn).CornerRadius = UDim.new(0, 5)
    return Btn
end

local MinBtn = makeHeaderBtn("-", Color3.fromRGB(255, 200, 0), -55)
local CloseBtn = makeHeaderBtn("X", Color3.fromRGB(255, 77, 77), -28)

local Info = Instance.new("TextLabel")
Info.Size = UDim2.new(1, -20, 0, 22)
Info.Position = UDim2.new(0, 10, 0, 42)
Info.BackgroundTransparency = 1
Info.Font = Enum.Font.Gotham
Info.TextSize = 12
Info.TextColor3 = Color3.fromRGB(220, 220, 220)
Info.TextXAlignment = Enum.TextXAlignment.Left
Info.Text = ("Map: %s  |  Checkpoints: %d  |  File: %s"):format(mapKey, #checkpoints, CAN_FILE and "ON" or "OFF")
Info.Parent = MainFrame

-- Scroll container
local BtnContainer = Instance.new("ScrollingFrame")
BtnContainer.Size = UDim2.new(1, 0, 1, -75)
BtnContainer.Position = UDim2.new(0, 0, 0, 70)
BtnContainer.BackgroundTransparency = 1
BtnContainer.CanvasSize = UDim2.new(0, 0, 0, 0)
BtnContainer.ScrollBarThickness = 6
BtnContainer.ScrollBarImageColor3 = Color3.fromRGB(0, 200, 255)
BtnContainer.Parent = MainFrame

local layout = Instance.new("UIListLayout")
layout.Parent = BtnContainer
layout.Padding = UDim.new(0, 10)
layout.HorizontalAlignment = Enum.HorizontalAlignment.Center
layout.SortOrder = Enum.SortOrder.LayoutOrder

layout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    BtnContainer.CanvasSize = UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y)
end)

local function makeButton(text, color)
    local Btn = Instance.new("TextButton")
    Btn.Size = UDim2.new(1, -20, 0, 40)
    Btn.Text = text
    Btn.Font = Enum.Font.GothamBold
    Btn.TextSize = 14
    Btn.BackgroundColor3 = color
    Btn.TextColor3 = Color3.fromRGB(255, 255, 255)
    Btn.Parent = BtnContainer
    Instance.new("UICorner", Btn).CornerRadius = UDim.new(0, 6)
    return Btn
end

-- Tombol utama
local SaveBtn   = makeButton("üíæ Simpan Checkpoint", Color3.fromRGB(0, 170, 255))
local FarmBtn   = makeButton("‚ñ∂ Mulai Auto Farm", Color3.fromRGB(0, 200, 100))
-- Input Delay (dalam scroll, di bawah Auto Farm)
local DelayInput = Instance.new("TextBox")
DelayInput.Size = UDim2.new(1, -20, 0, 40)
DelayInput.Position = UDim2.new(0, 10, 0, 0)
DelayInput.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
DelayInput.TextColor3 = Color3.fromRGB(255, 255, 255)
DelayInput.Font = Enum.Font.GothamBold
DelayInput.TextSize = 14
DelayInput.PlaceholderText = "Delay harus lebih dari 3 detik"
DelayInput.Text = tostring(tpDelay)
DelayInput.ClearTextOnFocus = false
Instance.new("UICorner", DelayInput).CornerRadius = UDim.new(0, 6)
DelayInput.Parent = BtnContainer

-- Pastikan Delay minimal 3 detik
DelayInput.FocusLost:Connect(function()
    local val = tonumber(DelayInput.Text)
    if val and val >= 3 then
        tpDelay = val
        sendNotif("Delay", "Delay diubah jadi "..tpDelay.." detik.", 2)
    else
        DelayInput.Text = tostring(tpDelay)
        sendNotif("Delay", "Minimal delay 3 detik!", 2)
    end
end)
local ClearBtn  = makeButton("üóë Hapus Semua Checkpoint", Color3.fromRGB(200, 50, 50))
local ExportBtn = makeButton("üì§ Bagikan Checkpoint", Color3.fromRGB(140, 120, 255))
local ImportBtn = makeButton("üì• Load Checkpoint", Color3.fromRGB(120, 200, 255))
local LoopBtn   = makeButton("üîÅ Mode: Loop", Color3.fromRGB(100, 100, 100))

-- Import Modal
local Modal = Instance.new("Frame")
Modal.Visible = false
Modal.Parent = MainFrame
Modal.Size = UDim2.new(1, -40, 0, 150)
Modal.Position = UDim2.new(0, 20, 0, 100)
Modal.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
Instance.new("UICorner", Modal).CornerRadius = UDim.new(0, 8)

local ModalTitle = Instance.new("TextLabel")
ModalTitle.Parent = Modal
ModalTitle.BackgroundTransparency = 1
ModalTitle.Size = UDim2.new(1, -20, 0, 20)
ModalTitle.Position = UDim2.new(0, 10, 0, 10)
ModalTitle.Font = Enum.Font.GothamBold
ModalTitle.TextSize = 14
ModalTitle.TextColor3 = Color3.fromRGB(255,255,255)
ModalTitle.TextXAlignment = Enum.TextXAlignment.Left
ModalTitle.Text = "Paste Code Checkpoints:"

local Input = Instance.new("TextBox")
Input.Parent = Modal
Input.Size = UDim2.new(1, -20, 0, 70)
Input.Position = UDim2.new(0, 10, 0, 35)
Input.ClearTextOnFocus = false
Input.MultiLine = true
Input.TextWrapped = true
Input.TextXAlignment = Enum.TextXAlignment.Left
Input.TextYAlignment = Enum.TextYAlignment.Top
Input.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
Input.TextColor3 = Color3.fromRGB(230, 230, 230)
Input.Font = Enum.Font.Code
Input.TextSize = 12
Instance.new("UICorner", Input).CornerRadius = UDim.new(0, 6)

local Confirm = Instance.new("TextButton")
Confirm.Parent = Modal
Confirm.Size = UDim2.new(0.5, -15, 0, 28)
Confirm.Position = UDim2.new(0, 10, 1, -38)
Confirm.Text = "Import"
Confirm.Font = Enum.Font.GothamBold
Confirm.TextSize = 14
Confirm.BackgroundColor3 = Color3.fromRGB(0, 180, 110)
Confirm.TextColor3 = Color3.fromRGB(255,255,255)
Instance.new("UICorner", Confirm).CornerRadius = UDim.new(0, 6)

local Cancel = Instance.new("TextButton")
Cancel.Parent = Modal
Cancel.Size = UDim2.new(0.5, -15, 0, 28)
Cancel.Position = UDim2.new(0.5, 5, 1, -38)
Cancel.Text = "Batal"
Cancel.Font = Enum.Font.GothamBold
Cancel.TextSize = 14
Cancel.BackgroundColor3 = Color3.fromRGB(180, 60, 60)
Cancel.TextColor3 = Color3.fromRGB(255,255,255)
Instance.new("UICorner", Cancel).CornerRadius = UDim.new(0, 6)

-- ====== BUTTON EVENTS ======
local minimized = false
MinBtn.MouseButton1Click:Connect(function()
    minimized = not minimized
    BtnContainer.Visible = not minimized
    Info.Visible = not minimized
    MainFrame.Size = minimized and UDim2.new(0, 260, 0, 40) or UDim2.new(0, 260, 0, 360)
end)

CloseBtn.MouseButton1Click:Connect(function()
    farming = false
    ScreenGui:Destroy()
end)

local function updateInfo()
    Info.Text = ("Map: %s  |  Checkpoints: %d  |  File: %s"):format(mapKey, #checkpoints, CAN_FILE and "ON" or "OFF")
end

local function updateFarmBtn()
    if farming then
        FarmBtn.Text = "‚èπ Stop Auto Farm"
        FarmBtn.BackgroundColor3 = Color3.fromRGB(255, 170, 0)
    else
        FarmBtn.Text = "‚ñ∂ Mulai Auto Farm"
        FarmBtn.BackgroundColor3 = Color3.fromRGB(0, 200, 100)
    end
end

SaveBtn.MouseButton1Click:Connect(function()
    saveCheckpoint()
    updateInfo()
end)

FarmBtn.MouseButton1Click:Connect(function()
    if farming then
        farming = false
        sendNotif("Auto Farm", "Dihentikan.", 2)
        updateFarmBtn()
        return
    end
    if #checkpoints == 0 then
        sendNotif("Auto Farm", "Ga ada checkpoint di map ini.", 3)
        return
    end
    farming = true
    sendNotif("Auto Farm", "Mulai!", 2)
    updateFarmBtn()
    task.spawn(function()
        while farming do
            for _, pos in ipairs(checkpoints) do
                if not farming then break end
                tpTo(pos)
            end
            if not farming then break end
            if loopMode then
                respawn()
                task.wait(3)
            else
                farming = false
                updateFarmBtn()
                sendNotif("Auto Farm", "Selesai 1 putaran.", 2)
                break
            end
        end
    end)
end)

ClearBtn.MouseButton1Click:Connect(function()
    clearCheckpoints()
    updateInfo()
end)

ExportBtn.MouseButton1Click:Connect(function()
    exportCurrentMap()
end)

ImportBtn.MouseButton1Click:Connect(function()
    Modal.Visible = true
    Input.Text = ""
end)

Confirm.MouseButton1Click:Connect(function()
    local ok = importCurrentMapFromString(Input.Text)
    if ok then
        refreshRuntimeFromStore()
        updateInfo()
    end
    Modal.Visible = false
end)

Cancel.MouseButton1Click:Connect(function()
    Modal.Visible = false
end)

LoopBtn.MouseButton1Click:Connect(function()
    loopMode = not loopMode
    LoopBtn.Text = loopMode and "üîÅ Mode: Loop" or "‚û°Ô∏è Mode: Single-Run"
end)

updateInfo()
updateFarmBtn()
sendNotif("Auto Summit", ("Loaded map %s. CP: %d. File: %s"):format(mapKey, #checkpoints, CAN_FILE and "ON" or "OFF"), 4)
