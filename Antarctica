local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()

-------------------------------------------
----- =======[ NOTIFY FUNCTION ]
-------------------------------------------

local blockNotify = false

local function NotifySuccess(title, message, duration)
    WindUI:Notify({
        Title = title,
        Content = message,
        Duration = 3,
        Icon = "circle-check"
    })
end

local function NotifyError(title, message, duration)
    WindUI:Notify({
        Title = title,
        Content = message,
        Duration = 3,
        Icon = "ban"
    })
end

local function NotifyInfo(title, message, duration)
    WindUI:Notify({
        Title = title,
        Content = message,
        Duration = 3,
        Icon = "info"
    })
end

local function NotifyWarning(title, message, duration)
    WindUI:Notify({
        Title = title,
        Content = message,
        Duration = 3,
        Icon = "triangle-alert"
    })
end

-------------------------------------------
----- =======[ WINDOW FUNCTION ]
-------------------------------------------


local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- GUI Window
local Window = WindUI:CreateWindow({
    Title = "Expedition Antarctica",
    Icon = "tent-tree",
    Author = "by SansMobaHub",
    Folder = "SansMobaHub",
    Size = UDim2.fromOffset(400, 350),
    Transparent = true,
    Theme = "Dark",
    Resizable = true,
    SideBarWidth = 150,
    BackgroundImageTransparency = 0.3,
    HideSearchBar = true,
    ScrollBarEnabled = false,

    User = {
        Enabled = true,
        Anonymous = false,
        Callback = function() end,
    },
})

-- Langsung jalan tanpa key
NotifySuccess("SansMobaHub", "All Features Loaded!")

-------------------------------------------
----- =======[ TAB FUNCTION ]
-------------------------------------------

local Summit = Window:Tab({
    Title = "Auto Summit",
    Icon = "leaf"
})

local Player = Window:Tab({
    Title = "Player",
    Icon = "users-round"
})

local Misc = Window:Tab({
	Title = "Misc",
	Icon = "layers"
})

-------------------------------------------
----- =======[ AUTO SUMMIT FUNCTION ]
-------------------------------------------

local delayBetweenCheckpoints = 10

Summit:Slider({
    Title = "Delay Checkpoints",
    Desc = "Recommendation use 30-45",
    Step = 1,
    Value = {
        Min = 10,
        Max = 60,
        Default = 10
    },
    Callback = function(value)
        delayBetweenCheckpoints = value
    end
})

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local LocalPlayer = Players.LocalPlayer
local HumanoidRootPart = nil
local Message_Remote = ReplicatedStorage:WaitForChild("Message_Remote")

local checkpoints = {
    {
        name = "Camp 1",
        cframe = CFrame.new(-3719.6709, 224.999985, 235.502884, 0.999699116, -6.8461091e-08, -0.0245282892, 7.06166006e-08, 1, 8.70122321e-08, 0.0245282892, -8.87181528e-08, 0.999699116),
        message = "You have made it to Camp 1"
    },
    {
        name = "Camp 2",
        cframe = CFrame.new(1790.85803, 105.452957, -138.388397, -0.907786548, -9.78259607e-09, -0.419432491, -2.94368387e-08, 1, 4.03873557e-08, 0.419432491, 4.90098628e-08, -0.907786548),
        message = "You have made it to Camp 2"
    },
    {
        name = "Camp 3",
        cframe = CFrame.new(5892.77051, 320.999969, -18.5320702, 1, 6.12843252e-08, 0, -6.12843252e-08, 1, -1.16254647e-07, 0, 1.16254647e-07, 1),
        message = "You have made it to Camp 3"
    },
    {
        name = "Camp 4",
        cframe = CFrame.new(8991.90234, 595.598022, 103.342545, 0.357652724, -7.10228747e-08, 0.93385464, -3.31383063e-08, 1, 8.87449474e-08, -0.93385464, -6.26862331e-08, 0.357652724),
        message = "You have made it to Camp 4"
    },
    {
        name = "South Pole",
        cframe = CFrame.new(10990.2539, 549.14386, 103.088318, 0.774742663, 3.86845826e-08, 0.632276654, 2.8145724e-08, 1, -9.5670579e-08, -0.632276654, 9.19159646e-08, 0.774742663),
        message = "You have made it to South Pole"
    }
}

local modeTeleport = "Tween"

local function instantTeleport(cframe)
    if HumanoidRootPart then
        HumanoidRootPart.CFrame = cframe
    end
end

local function tweenTeleport(cframe, speed)
    if HumanoidRootPart then
        local distance = (HumanoidRootPart.Position - cframe.Position).Magnitude
        local tweenInfo = TweenInfo.new(distance / speed, Enum.EasingStyle.Linear)
        local tween = TweenService:Create(HumanoidRootPart, tweenInfo, {CFrame = cframe})
        tween:Play()
        tween.Completed:Wait()
    end
end

local jumping = false
local function startJumping()
    jumping = true
    task.spawn(function()
        while jumping do
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
                LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
            end
            task.wait(1)
        end
    end)
end

local function stopJumping()
    jumping = false
end

local function respawnToBasecamp()
    local char = LocalPlayer.Character
    if char and char:FindFirstChild("Humanoid") then
        char.Humanoid.Health = 0
    end
end

Summit:Dropdown({
    Title = "Teleport Method",
    Values = { "Instant", "Tween" },
    Value = "Instant",
    Callback = function(option) 
        modeTeleport = option
        print("Teleport selected: " .. option)
    end
})

local autoSummit = false
Summit:Toggle({
    Title = "Auto Summit (Beta)",
    Default = false,
    Callback = function(state)
        autoSummit = state
        if state then
            task.spawn(function()
                while autoSummit do
                    HumanoidRootPart = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                    if not HumanoidRootPart then return end

                    for i, checkpoint in ipairs(checkpoints) do
                        if not autoSummit then break end

                        NotifyInfo("Auto Summit", "Moving to: " .. checkpoint.name)
                        if modeTeleport == "Tween" then
                            tweenTeleport(checkpoint.cframe, 50)
                        elseif modeTeleport == "Instant" then
                            instantTeleport(checkpoint.cframe)
                        end
                        startJumping()

                        local checkpointReached = false
                        local connection
                        connection = Message_Remote.OnClientEvent:Connect(function(msg)
                            if string.find(msg, checkpoint.message) then
                                checkpointReached = true
                                NotifySuccess("Checkpoint", checkpoint.name .. " reached!")
                            end
                        end)

                        while not checkpointReached and autoSummit do
                            task.wait(0.1)
                        end

                        connection:Disconnect()
                        stopJumping()

                        if checkpoint.name == "South Pole" and autoSummit then
                            NotifySuccess("ðŸŽ‰ Summit Complete!", "Respawning... Restarting Auto Summit!")
                            task.wait(2)
                            respawnToBasecamp()
                            task.wait(5)
                        else
                            task.wait(delayBetweenCheckpoints)
                        end
                    end
                end
                NotifyInfo("Auto Summit", "Stopped by user.")
            end)
        end
    end
})

-------------------------------------------
----- =======[ PLAYER FUNCTION ]
-------------------------------------------


local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Lighting = game:GetService("Lighting")
local UserInputService = game:GetService("UserInputService")

local moveSpeedValue = 16

Player:Slider({
    Title = "Move Speed",
    Step = 1,
    Value = {
        Min = 16,
        Max = 200,
        Default = 25,
    },
    Callback = function(value)
        moveSpeedValue = value
    end
})

RunService.RenderStepped:Connect(function()
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        LocalPlayer.Character.Humanoid.WalkSpeed = moveSpeedValue
    end
end)

local jumpPowerValue = 50

Player:Slider({
    Title = "Jump Power",
    Step = 1,
    Value = {
        Min = 15,
        Max = 300,
        Default = 20,
    },
    Callback = function(value)
        jumpPowerValue = value
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.UseJumpPower = true
            LocalPlayer.Character.Humanoid.JumpPower = jumpPowerValue
        end
    end
})

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local RS = game:GetService("RunService")


local WaterBottle = LocalPlayer.Backpack:WaitForChild("Water Bottle")
local DrinkRemote = WaterBottle:WaitForChild("RemoteEvent")
local Message_Remote = ReplicatedStorage:WaitForChild("Message_Remote")
local EnergyHydration = ReplicatedStorage:WaitForChild("Events"):WaitForChild("EnergyHydration")


getgenv().AutoRefill = false
local refillPos = Vector3.new(-6039, -159, -61)


local function drinkLoop()
    while getgenv().AutoRefill do
        local hydrationGui = LocalPlayer.PlayerGui:FindFirstChild("Info Bar")
        if hydrationGui then
            local percentLabel = hydrationGui.Frame:FindFirstChild("Hydration Percent")
            if percentLabel then
                local text = percentLabel.Text or "100%"
                local numberOnly = text:match("%d+") or "100"
                local percentText = tonumber(numberOnly) or 100
                if percentText <= 50 then
                    NotifyInfo("Auto Reffil Hydration", "Hydration low ("..percentText.."%), drinking...")
                    DrinkRemote:FireServer()
                end
            end
        end
        task.wait(1)
    end
end


local function autoRefillBottle()
    local root = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not root then return end

    local oldCFrame = root.CFrame
    NotifyInfo("Auto Reffil Hydration", "Bottle empty! Refilling...")


    root.CFrame = CFrame.new(refillPos)

    task.wait(0.1)


    EnergyHydration:FireServer("FillBottle", "BaseCamp", "Water")

    task.wait(0.1)

    root.CFrame = oldCFrame
    NotifySuccess("Auto Reffil Hydration", "Bottle Refilled!")
end

Message_Remote.OnClientEvent:Connect(function(msg)
    if tostring(msg):match("empty") then
        autoRefillBottle()
    end
end)

local notifyReffil = false
Misc:Toggle({
    Title = "Auto Refill Hydration",
    Value = false,
    Callback = function(enabled)
        getgenv().AutoRefill = enabled
        if not notifyReffil then
            notifyReffil = true
            return
        end
        
        if enabled then
            NotifySuccess("Auto Reffil Hydration", "Enabled")
            task.spawn(drinkLoop)
        else
            NotifySuccess("Auto Reffil Hydration", "Disabled")
        end
    end,
})

local infiniteJumpEnabled = false

UserInputService.JumpRequest:Connect(function()
    if infiniteJumpEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
        LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)

Player:Toggle({
    Title = "Infinite Jump",
    Default = false,
    Callback = function(state)
        if not blockNotify then
            blockNotify = true
            return
        end
        infiniteJumpEnabled = state
        NotifySuccess("Infinite Jump", (state and "Enabled" or "Disabled"))
    end
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local fallDamageNotify = false
Player:Toggle({
    Title = "Anti Fall Damage",
    Default = false,
    Callback = function(state)
        if not fallDamageNotify then
            fallDamageNotify = true
            return
        end
        
        local charContainer = workspace:FindFirstChild("Characters%")
        if charContainer and charContainer:FindFirstChild(LocalPlayer.Name) then
            local char = charContainer[LocalPlayer.Name]
            local fallDamage = char:FindFirstChild("Client_Fall_Damage")

            if fallDamage and fallDamage:IsA("LocalScript") then
                fallDamage.Disabled = state
                NotifySuccess("Anti Fall Damage", " " .. (state and "Enabled" or "Disabled"))
            else
                print("Client_Fall_Damage tidak ditemukan atau bukan LocalScript.")
            end
        else
            print("Path karakter tidak ditemukan.")
        end
    end
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Lighting = game:GetService("Lighting")

local antiFreezeEnabled = false
local freezeEvent = ReplicatedStorage:FindFirstChild("Freeze_damage")

local oldNamecall
oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
    local method = getnamecallmethod()
    if antiFreezeEnabled and method == "FireServer" and self == freezeEvent then
        return
    end
    return oldNamecall(self, ...)
end)

local freezeNotify
Player:Toggle({
    Title = "Anti Freeze",
    Default = false,
    Callback = function(state)
        if not freezeNotify then
            freezeNotify = true
            return
        end
        
        antiFreezeEnabled = state
        NotifySuccess("Anti Freeze", (state and "Enabled" or "Disabled"))
    end
})

local noClipEnabled = false

Player:Toggle({
    Title = "Player Noclip",
    Desc = "Walk through anything",
    Default = false,
    Callback = function(state)
        noClipEnabled = state
        if state then
            Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
            RunService.Stepped:Connect(function()
                if noClipEnabled and Character then
                    for _, part in pairs(Character:GetDescendants()) do
                        if part:IsA("BasePart") and part.CanCollide then
                            part.CanCollide = false
                        end
                    end
                end
            end)
        end
    end
})

local floatPlatform = nil

local function floatingPlat(enabled)
    if not floatNotify then
        floatNotify = true
        return
    end
    
	if enabled then
			local charFolder = workspace:WaitForChild("Characters%", 5)
			local char = charFolder:FindFirstChild(LocalPlayer.Name)
			if not char then return end

			local hrp = char:FindFirstChild("HumanoidRootPart")
			if not hrp then return end

			floatPlatform = Instance.new("Part")
			floatPlatform.Anchored = true
			floatPlatform.Size = Vector3.new(10, 1, 10)
			floatPlatform.Transparency = 1
			floatPlatform.CanCollide = true
			floatPlatform.Name = "FloatPlatform"
			floatPlatform.Parent = workspace

			task.spawn(function()
				while floatPlatform and floatPlatform.Parent do
					pcall(function()
						floatPlatform.Position = hrp.Position - Vector3.new(0, 3.5, 0)
					end)
					task.wait(0.1)
				end
			end)

			NotifySuccess("Float Enabled", "This feature has been successfully activated!")
		else
			if floatPlatform then
				floatPlatform:Destroy()
				floatPlatform = nil
			end
			NotifyWarning("Float Disabled", "Feature disabled")
		end
end

local floatNotify = true
Player:Toggle({
	Title = "Enable Float",
	Value = false,
	Callback = function(enabled)
	    
	    floatingPlat(enabled)
	end,
})


-------------------------------------------
----- =======[ MISC FUNCTION ]
-------------------------------------------

local antiFogEnabled = false

local function removeFog()
    Lighting.FogEnd = 1000000
    Lighting.FogStart = 0
    if Lighting:FindFirstChildOfClass("Atmosphere") then
        Lighting:FindFirstChildOfClass("Atmosphere"):Destroy()
    end
end

local fogNotify = false
Misc:Toggle({
    Title = "Anti Fog",
    Default = false,
    Callback = function(state)
        if not fogNotify then
            fogNotify = true
            return
        end
        
        antiFogEnabled = state
        if state then
            removeFog()
            Lighting.Changed:Connect(function()
                if antiFogEnabled then
                    removeFog()
                end
            end)
            NotifySuccess("Anti Fog", "Enabled")
        else
            NotifySuccess("Anti Fog", "Disabled")
        end
    end
})

local alwaysDayEnabled = false

local function setAlwaysDay()
    if alwaysDayEnabled then
        Lighting.ClockTime = 12
        Lighting.Brightness = 2
        Lighting.FogEnd = 1e6
        Lighting.Changed:Connect(function()
            if alwaysDayEnabled then
                Lighting.ClockTime = 12
                Lighting.Brightness = 2
                Lighting.FogEnd = 1e6
            end
        end)
    end
end

local dayNotify = false
Misc:Toggle({
    Title = "Always Day",
    Default = false,
    Callback = function(state)
        if not dayNotify then
            dayNotify = true
            return
        end
        
        alwaysDayEnabled = state
        if state then
            setAlwaysDay()
            NotifySuccess("Always Day", "Enabled")
        else
            NotifySuccess("Always Day", "Disabled")
        end
    end
})



local plr = game:GetService("Players").LocalPlayer
getgenv().Anti = true


local Anti
Anti = hookmetamethod(game, "__namecall", function(self, ...)
    if self == plr and getnamecallmethod():lower() == "kick" and getgenv().Anti then
        return warn("[ANTI-KICK] Client Tried To Call Kick Function On LocalPlayer")
    end
    return Anti(self, ...)
end)

Misc:Toggle({
    Title = "Anti Kick",
    Value = true,
    Callback = function(enabled)
        getgenv().Anti = enabled
        if enabled then
            warn("[ANTI-KICK] Protection Enabled")
        else
            warn("[ANTI-KICK] Protection Disabled")
        end
    end,
})
